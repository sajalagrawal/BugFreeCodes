//code generated by CHATGPT

#include <bits/stdc++.h>
using namespace std;

// Node structure for Huffman tree
struct HuffmanNode {
    char ch;      // Character
    int freq;     // Frequency of character
    HuffmanNode *left, *right; // Left and Right children

    HuffmanNode(char c, int f) {
        ch = c;
        freq = f;
        left = right = nullptr;
    }
};

// Comparator for priority queue (min-heap)
struct Compare {
    bool operator()(HuffmanNode* a, HuffmanNode* b) {
        return a->freq > b->freq; // Min-Heap based on frequency
    }
};

// Function to generate Huffman Codes
void generateHuffmanCodes(HuffmanNode* root, string code, unordered_map<char, string>& huffmanCode) {
    if (!root) return;

    // If it's a leaf node, store the code
    if (!root->left && !root->right) {
        huffmanCode[root->ch] = code;
    }

    // Traverse left (add '0') and right (add '1')
    generateHuffmanCodes(root->left, code + "0", huffmanCode);
    generateHuffmanCodes(root->right, code + "1", huffmanCode);
}

// Function to build Huffman Tree
HuffmanNode* buildHuffmanTree(const unordered_map<char, int>& freqMap) {
    priority_queue<HuffmanNode*, vector<HuffmanNode*>, Compare> minHeap;

    // Insert characters and their frequencies into minHeap
    for (auto& pair : freqMap) {
        minHeap.push(new HuffmanNode(pair.first, pair.second));
    }

    // Merge nodes to form the Huffman tree
    while (minHeap.size() > 1) {
        HuffmanNode *left = minHeap.top(); minHeap.pop();
        HuffmanNode *right = minHeap.top(); minHeap.pop();

        // Create a new internal node with combined frequency
        // '\0' is null in C++ - Internal nodes do not store characters
        HuffmanNode *newNode = new HuffmanNode('\0', left->freq + right->freq);
        newNode->left = left;
        newNode->right = right;

        minHeap.push(newNode);
    }

    return minHeap.top(); // Root of Huffman tree
}

// Function to encode a given string using Huffman coding
string encodeString(const string& text, unordered_map<char, string>& huffmanCode) {
    string encodedStr;
    for (char ch : text) {
        encodedStr += huffmanCode[ch]; // Replace each character with Huffman code
    }
    return encodedStr;
}

// Function to decode the Huffman encoded string
string decodeString(HuffmanNode* root, const string& encodedStr) {
    string decodedStr;
    HuffmanNode* curr = root;

    for (char bit : encodedStr) {
        // Traverse the tree based on 0 or 1
        curr = (bit == '0') ? curr->left : curr->right;

        // If a leaf node is reached, append character
        if (!curr->left && !curr->right) {
            decodedStr += curr->ch;
            curr = root; // Reset to root for next character decoding
        }
    }

    return decodedStr;
}

// Main function
int main() {
    string text = "hello huffman"; // Input text to be encoded
    
    // Step 1: Calculate frequency of each character
    unordered_map<char, int> freqMap;
    for (char ch : text) {
        freqMap[ch]++;
    }

    // Step 2: Build Huffman Tree
    HuffmanNode* root = buildHuffmanTree(freqMap);

    // Step 3: Generate Huffman Codes
    unordered_map<char, string> huffmanCode;
    generateHuffmanCodes(root, "", huffmanCode);

    // Step 4: Encode the input string
    string encodedStr = encodeString(text, huffmanCode);
    cout << "Huffman Codes:\n";
    for (auto& pair : huffmanCode) {
        cout << pair.first << " -> " << pair.second << endl;
    }
    
    cout << "\nEncoded String: " << encodedStr << endl;

    // Step 5: Decode the encoded string
    string decodedStr = decodeString(root, encodedStr);
    cout << "\nDecoded String: " << decodedStr << endl;

    return 0;
}


/*

Huffman Codes:
h -> 00
e -> 01
l -> 10
o -> 110
  -> 1110
u -> 11110
f -> 11111
m -> 101

Encoded String: 000110101011111011111010000

Decoded String: hello huffman

*/
